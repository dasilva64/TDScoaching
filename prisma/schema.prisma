generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id(map: "article_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String   @unique @db.VarChar
  content     Json     @db.Json
  description String   @db.VarChar
  slug        String   @unique @db.VarChar
  image       String   @db.VarChar
}

model User {
  id                                       String         @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mail                                     String         @unique @db.VarChar
  firstname                                String         @db.VarChar
  lastname                                 String         @db.VarChar
  password                                 String?        @db.VarChar
  registerToken                            Json?          @db.Json
  resetToken                               Json?          @db.Json
  editEmail                                Json?          @db.Json
  role                                     String?        @db.VarChar
  status                                   Boolean?
  deleteToken                              Json?          @db.Json
  discovery                                Boolean?       @default(true)
  deleteReason                             String?
  meetingId                                String?        @unique @db.Uuid
  offreId                                  String?        @db.Uuid
  isTwoFactorEnabled                       Boolean        @default(false)
  twoFAToken                               Json?          @db.Json
  saveCard                                 Boolean?
  customerId                               String?
  isMajor                                  Boolean
  meeting_test                             meeting_test?  @relation(fields: [meetingId], references: [id], onUpdate: NoAction)
  offre_test                               offre_test?    @relation(fields: [offreId], references: [id], onUpdate: NoAction, map: "User_offreMeeting_fkey")
  UserAgreement                            UserAgreement?
  meeting_test_meeting_test_userMailToUser meeting_test[] @relation("meeting_test_userMailToUser")
  offre_test_offre_test_userIdToUser       offre_test[]   @relation("offre_test_userIdToUser")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model offre_test {
  type                                                   String
  currentNumberOfMeeting                                 Int?           @db.SmallInt
  currentMeetingId                                       String?        @db.Uuid
  id                                                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                                                 String         @db.Uuid
  acceptedContrat                                        Boolean?
  coaching                                               String?
  price                                                  Int?
  status                                                 String
  stripeIntentId                                         String?        @unique(map: "offre_test_paymentMethodId_key")
  hasCard                                                Boolean
  User                                                   User[]
  meeting_test_meeting_test_offreIdTooffre_test          meeting_test[] @relation("meeting_test_offreIdTooffre_test")
  meeting_test_offre_test_currentMeetingIdTomeeting_test meeting_test?  @relation("offre_test_currentMeetingIdTomeeting_test", fields: [currentMeetingId], references: [id], onUpdate: NoAction)
  User_offre_test_userIdToUser                           User           @relation("offre_test_userIdToUser", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meeting_test {
  id                                                   String       @id(map: "meeting_test_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startAt                                              DateTime     @db.Timestamp(6)
  status                                               String
  token                                                String?
  userMail                                             String
  createdAt                                            DateTime     @default(now()) @db.Timestamp(6)
  offreId                                              String?      @db.Uuid
  numberOfMeeting                                      String
  reminderSent                                         Boolean      @default(false)
  status_payment                                       String
  User                                                 User?
  offre_test_meeting_test_offreIdTooffre_test          offre_test?  @relation("meeting_test_offreIdTooffre_test", fields: [offreId], references: [id], onUpdate: NoAction)
  User_meeting_test_userMailToUser                     User         @relation("meeting_test_userMailToUser", fields: [userMail], references: [mail], onDelete: SetNull, onUpdate: NoAction)
  offre_test_offre_test_currentMeetingIdTomeeting_test offre_test[] @relation("offre_test_currentMeetingIdTomeeting_test")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserAgreement {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  acceptedCGV   Boolean?
  acceptedCGVAt DateTime? @db.Timestamp(6)
  acceptedCGU   Boolean
  acceptedCGUAt DateTime  @db.Timestamp(6)
  User          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
