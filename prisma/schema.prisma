generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id(map: "article_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String   @unique @db.VarChar
  content     Json     @db.Json
  description String   @db.VarChar
  slug        String   @unique @db.VarChar
  image       String   @db.VarChar
}

model Meeting {
  id          String   @id(map: "meeting_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startAt     DateTime @db.Timestamp(6)
  status      Boolean
  userId      String   @db.Uuid
  limitDate   String?  @db.VarChar
  paymentId   String?  @unique
  typeMeeting Json?    @db.Json
  link        String?
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meeting_userid_fkey")
}

model MeetingDiscovery {
  id       String   @id(map: "meetingdiscovery_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startAt  DateTime @db.Timestamp(6)
  userMail String   @unique @db.VarChar
  token    String   @unique
  type     String
  confirm  Boolean
  statut   String
  coaching String
  User     User     @relation(fields: [userMail], references: [mail], onDelete: Cascade, onUpdate: NoAction, map: "meeting_usermail_fkey")
}

model User {
  id               String            @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mail             String            @unique @db.VarChar
  firstname        String            @db.VarChar
  lastname         String            @db.VarChar
  password         String            @db.VarChar
  registerToken    Json?             @db.Json
  resetToken       Json?             @db.Json
  editEmail        Json?             @db.Json
  role             String            @db.VarChar
  status           Boolean
  deleteToken      Json?             @db.Json
  discovery        Boolean
  deleteReason     String?
  Meeting          Meeting[]
  MeetingDiscovery MeetingDiscovery?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meeting_test {
  id       BigInt   @id @default(autoincrement())
  startAt  DateTime @db.Timestamp(6)
  coaching String
  confirm  Boolean
  status   String
  token    String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model offre_test {
  id                     BigInt       @id @default(autoincrement())
  type                   String
  currentNumberOfMeeting Int?         @db.SmallInt
  meetingId              BigInt?
  offre_test             offre_test?  @relation("offre_testTooffre_test", fields: [meetingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_offre_test       offre_test[] @relation("offre_testTooffre_test")
}
